@page "/user"
@using DataAccess
@using DataAccess.Model
@using Microsoft.EntityFrameworkCore
@using ProjectManagementApp.Services
@inject ICompanyService companyService
@inject IProjectService projectService
@inject IUser userService
@inject NavigationManager NavigationManager
<h3>UserView</h3>
<button class = "btn btn-dark" @onclick = "addNewUser"><i class="material-icons">add</i>Add user</button>

<div class="container">
    <div class="section1">
        <h3>List of all the projects</h3>
        <table class="table">
          <thead>
            <tr>
              <th scope="col">No</th>
              <th scope="col">User Name</th>
              <th scope="col">Email</th>
              <th scope="col">Contact No</th>
              <th scope="col">User Company</th>
              <th scope="col">User Projects Count</th>
              <th scope="col">User Manager</th>
            </tr>
          </thead>
          <tbody>
                @foreach (var item in userList)
                {
                   <tr>
                      <th scope="row">@item.Id</th>
                      <td>userName</td>
                      <td>userEmail</td>
                      <td>@item.userContactNo</td>
                      <td>@companyName[userList.IndexOf(item)]</td>
                      <td>
                          <table>
                              @{var projectLinqQuery = from value in projectList where value.projectId == item.projectId select new {item.Id,value.projectName };}
                              @foreach (var projName in projectLinqQuery)
                             {
                                 if(projName.Id == item.Id){
                                   <tr>
                                     <td>@projName.projectName</td>
                                   </tr>
                                 }
                             }
                          </table>
                      </td>
                      <td>
                          <button type="button" class="btn btn-success" id="@item.Id" data-bs-toggle="modal" data-bs-target="#EditProject" @onclick = "@((args) =>openEditDialog(Int16.Parse(@item.Id)) )">
                              <i class="material-icons">edit</i>Edit User
                          </button>
                          <button type="button" class="btn btn-danger" id="@item.Id" data-bs-toggle="modal" data-bs-target="#DeleteProject" @onclick = "@((args) =>openDeletDialog(Int16.Parse(@item.Id)) )">
                              <i class="material-icons">delete</i>Remove User
                          </button>
                      </td>
                    </tr>
               }
          </tbody>
        </table>
    </div>
    @if (EditDialogOpen)
    {
        <UpdateUser userID = "@userId" OnClose = "@onEditDialogClose"></UpdateUser>
    }

    @if (DeleteDialogOpen)
    {
        <DeleteUser DeveloperId = "@userId" Title = "Remove the User" Message = "Are you sure you want to remove the user" OnClose = "@onDeleteDialogClose"></DeleteUser>
    }
</div>

<style>
    .container{
        margin:0px;
        padding:0px;
    }
    .heading{
        width:100%;
        display: flex;
        justify-content: space-between;
        background-color: lightblue;
        padding:10px;
    }
    .table td{
        border-top:none;

    }
</style>

@code {
    public int count = 0;
    public bool EditDialogOpen { get; set; }
    public bool DeleteDialogOpen { get; set; }
    public int userId { get; set; }
    List<Project> projectList = new List<Project>();
    List<Developer> userList = new List<Developer>();
    List<Company> listOfCompanies = new List<Company>();
    List<string> companyName = new List<string>();

    protected async override Task OnInitializedAsync()
    {
        listOfCompanies = companyService.listOfCompanies();
        projectList = projectService.listOfProjects();
        userList = userService.listOfUsers();

        foreach (var item in userList)
        {
            var companyLinqQuery = from value in listOfCompanies where value.Id == item.companyId select value.CompanyName.ToString();
            companyName.Add(companyLinqQuery.FirstOrDefault());  
        }
    }

    //update user
    private void onEditDialogClose(bool accepted)
    {
        EditDialogOpen = false;
        StateHasChanged();
    }

    private void onEditDialogOpen()
    {
        EditDialogOpen = true;
        StateHasChanged();
    }

    private void openEditDialog(int ButtonId)
    {
        userId = ButtonId;
        onEditDialogOpen();
    }

    //delete user
    private void onDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        StateHasChanged();
    }

    private void onDeleteDialogOpen()
    {
        DeleteDialogOpen = true;
        StateHasChanged();
    }

    private void openDeletDialog(int ButtonId)
    {
        userId = ButtonId;
        onDeleteDialogOpen();
    }

    public void addNewUser()
    {
        NavigationManager.NavigateTo("/user/add");
    }

}