@page "/user/add"
@using DataAccess
@using DataAccess.Model
@using ProjectManagementApp.Services
@inject ICompanyService companyService
@inject IProjectService projectService
@inject IUser userService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<h3>CreateUser</h3>
<EditForm Model = "@user" OnValidSubmit="@HandleOnValidSubmit" class="col-7 p-0">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label for="user_email">User Email</label>
        <input id="user_email" type="email" class = "form-control" placeholder="alex123@gmail.com" @bind-value = "userEmail" />
    </div>
    <div class="form-group">
        <label for="user_contact">User Contact</label>
        <input id="user_contact" class = "form-control" placeholder="0713830606" @bind-value = "userContact" />
    </div>
     <div class="form-group">
        <label for="company_name">Select the user type : </label>
        <select id="userTypes" name="userTypes" value="@selectedUserType" @onchange = "onSelectedItemUser" >
            <option value="1">Admin</option>
            <option value="2">Developer</option>
        </select>
     </div>
     @if (Int16.Parse(selectedUserType) == 2)
    {
        <div class="form-group">
        <label for="company_name">Select the company name</label>
        <select id="companies" disabled="@isDisabled" value="@selectedCompany" name="Companies" @onchange = "onSelectedItemCompanies" >
            @foreach (var item in listOfCompanies)
           {
             <option value="@item.Id">@item.CompanyName</option>
           }
        </select>
    </div>
     <div class="form-group">
        <label for="project_name">Select the project assigned</label>
        <select id="projects" disabled="@isDisabled" value="@selectedProject" name="Projects" @onchange = "onSelectedItemProject" >
            @{var projectLinqQuery = from value in listOfProjects where value.companyProjectId == Int16.Parse(selectedCompany)  select new {value.projectId,value.projectName};}

            @foreach (var item in projectLinqQuery)
           {
             <option value="@item.projectId">@item.projectName</option>
           }
        </select>
    </div> 
    }
   
    <button class="btn btn-secondary">Add the User</button>
</EditForm>

@code {
    public User user = new User();
    public Developer developer = new Developer();
    private string userName = "";
    private string userEmail = "";
    private string userContact = "";
    private string selectedUserType = "1";
    private string selectedCompany = "1";
    private string selectedProject = "1";
    private bool isDisabled = true;
    List<Company> listOfCompanies = new List<Company>();
    List<Project> listOfProjects = new List<Project>();

    protected override async Task OnInitializedAsync()
    {
        listOfCompanies = companyService.listOfCompanies();
        listOfProjects = projectService.listOfProjects();
    }

    public void onSelectedItemUser(ChangeEventArgs e)
    {
        selectedUserType = e.Value.ToString();
        if(Int16.Parse(selectedUserType) == 2)
        {
            isDisabled = false;
        }
        else
        {
            isDisabled = true;
        }
    }

    public void onSelectedItemCompanies(ChangeEventArgs e)
    {
        selectedCompany = e.Value.ToString();
    }

    public void onSelectedItemProject(ChangeEventArgs e)
    {
        selectedProject = e.Value.ToString();
        Console.WriteLine(selectedProject);
    }

    public void HandleOnValidSubmit()
    {
        if(Int16.Parse(selectedUserType) == 2)
        {
            developer.UserName = userEmail;
            developer.Email = userEmail;
            developer.NormalizedUserName = userEmail.ToUpper();
            developer.NormalizedEmail = userEmail.ToUpper();
            developer.userContactNo = userContact;
            developer.companyId = Int16.Parse(selectedCompany);
            developer.projectId = Int16.Parse(selectedProject);
            userService.createDev(developer);
            if(developer != null)
            {
                ToastService.ShowSuccess("Developer is added successfully", "Success!");
                NavigationManager.NavigateTo("/user");
            }
            else
            {
                ToastService.ShowError("Something went wrong when adding the Developer", "Error");
            }
        }
        else
        {
            user.UserName = userEmail;
            user.Email = userEmail;
            user.NormalizedUserName = userEmail.ToUpper();
            user.NormalizedEmail = userEmail.ToUpper();
            user.userContactNo = userContact;
            userService.createAsync(user);
            if(user != null)
            {
                ToastService.ShowSuccess("Admin is added successfully", "Success!");
                NavigationManager.NavigateTo("/user");
            }
            else
            {
                ToastService.ShowError("Something went wrong when adding the Admin", "Error");
            }
        }
    }
}
