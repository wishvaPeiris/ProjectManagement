@using DataAccess.Model
@using ProjectManagementApp.Services
@inject ITaskService TicketService
@inject IToastService ToastService

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Edit Ticket</h5>
        <button type="button" class="btn btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick = "@ModalCancel"></button>
      </div>
      <div class="modal-body">
        <form>
          <div class="mb-3">
            <label for="recipient-name" class="col-form-label">Ticket Title:</label>
            <input type="text" class="form-control" id="recipient-name" @bind-value = "@ticketTitle" placeholder="@ticket.taskTitle">
          </div>
          <div class="mb-3">
            <label for="message-text" class="col-form-label">Ticket Description:</label>
            <textarea id="company_descriptiopn" @bind="ticketDescription" @bind:event="oninput" class = "form-control" placeholder="@ticket.taskDescription" />
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="@ModalCancel">Close</button>
        <button type="button" class="btn btn-primary" @onclick="@ModalOk">Save Ticket</button>
      </div>
    </div>
  </div>
</div>

@code {
    public Ticket ticket = new Ticket();
    private bool result = false;

    [Parameter]
    public int ticketID { get; set; }

    public string ticketTitle { get; set; }
    public string ticketDescription { get; set; }
    private DateTime createdDate = DateTime.Today;


    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    protected async override Task OnInitializedAsync()
    {
        ticket = TicketService.Get(ticketID);
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        ticket.taskTitle = ticketTitle;
        ticket.taskDescription = ticketDescription;

        result = TicketService.Upate(ticket);

        if (result)
         {
            ToastService.ShowSuccess("Task is updated successfully", "Success!");
         }
        else
          {
            ToastService.ShowError("Something went wrong when updating the task", "Error");
          }
         return OnClose.InvokeAsync(true);
    }
}
