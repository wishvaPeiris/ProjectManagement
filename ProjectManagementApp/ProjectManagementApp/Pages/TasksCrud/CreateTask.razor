@using DataAccess.Model
@using ProjectManagementApp.Services
@inject IUser userService
@inject ITaskService TicketService
@inject IToastService ToastService
@inject NavigationManager NavigationManager;

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Create Ticket</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick = "@ModalCancel"></button>
      </div>
      <div class="modal-body">
        <form>
          <div class="mb-3">
            <label for="recipient-name" class="col-form-label">Ticket Title:</label>
            <input type="text" class="form-control" id="recipient-name" @bind-value = "@ticketTitle">
          </div>
          <div class="mb-3">
            <label for="message-text" class="col-form-label">Ticket Description:</label>
            <textarea id="company_descriptiopn" @bind="ticketDescription" @bind:event="oninput" class = "form-control" />
          </div>
           <div class="form-group">
            <label for="company_name">Select the company name</label>
            <select id="users" name="Users" @onchange = "onSelectedItem"  >
                @foreach (var item in userList)
               {
                   <option value="@item.UserName">@item.UserName</option>
               }
            </select>
        </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="@ModalCancel">Close</button>
        <button type="button" class="btn btn-primary" @onclick="@ModalOk">Save Ticket</button>
      </div>
    </div>
  </div>
</div>


<style>
     .class{
        background : "#0000";
    }
</style>

@code {
    public Ticket ticket = new Ticket();
    public Developer developer = new Developer();
    private bool result = false;
    private string selectedUser = "1";
    List<Developer> userList = new List<Developer>();

    [Parameter]
    public int projectId { get; set; }

    public string ticketTitle { get; set; }
    public string ticketDescription { get; set; }
    private DateTime createdDate = DateTime.Today;


    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    protected async override Task OnInitializedAsync()
    {
        userList = userService.listOfDevelopersInProject(projectId);
    }

    public void onSelectedItem(ChangeEventArgs e)
    {
        selectedUser = e.Value.ToString();
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        developer = userService.GetByEmail(selectedUser);
        ticket.taskTitle = ticketTitle;  
        ticket.taskDescription = ticketDescription;
        ticket.projectId = projectId;
        ticket.taskCreateDate = createdDate;
        ticket.assignUserId = Guid.Parse(developer.Id);
        ticket.taskStatus = DataAccess.Enums.TicketStatus.New;

        result = TicketService.createTicket(ticket);

        if (result)
         {
            ToastService.ShowSuccess("Task is added successfully", "Success!");
            NavigationManager.NavigateTo("/taskboard");
         }
        else
          {
            ToastService.ShowError("Something went wrong when adding the task", "Error");
          }
         StateHasChanged();
         return OnClose.InvokeAsync(true);
    }
}
