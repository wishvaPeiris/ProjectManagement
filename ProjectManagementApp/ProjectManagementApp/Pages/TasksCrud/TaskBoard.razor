@page "/taskboard"
@attribute [Authorize(Policy = "DeveloperOnly")]
@using DataAccess.Enums
@using DataAccess.Model
@using ProjectManagementApp.Pages.TasksCrud.TaskboardComponents
@using ProjectManagementApp.Services
@inject IUser Userservice
@inject ITaskService TicketService

<div class="task-board-heading">
    <h3>Project Task board</h3>
    <button class = "btn btn-dark" @onclick = "@openCreateDialog">Create Task</button>
</div>
       <TicketContainer Tickets="Tickets" OnStatusUpdated="HandleStatusUpdated">
            <ProjectTicketList ListStatus="TicketStatus.New" AllowedStatuses="@(new TicketStatus[] { TicketStatus.Progress})" />
            <ProjectTicketList ListStatus="TicketStatus.Progress" AllowedStatuses="@(new TicketStatus[] { TicketStatus.New})" />
            <ProjectTicketList ListStatus="TicketStatus.Complete" AllowedStatuses="@(new TicketStatus[] { TicketStatus.Progress })" />
        </TicketContainer>
<hr />
<p>Last updated job was: <strong>@lastUpdatedJob</strong></p>
<hr />

<div>
@if (EditDialogOpen)
    {
       <CreateTask projectId ="@projectID" OnClose = "@onCreateDialogClose"></CreateTask>
    }
</div>

@code {

    List<Ticket> Tickets = new List<Ticket>();
    public bool EditDialogOpen { get; set; }
    public int projectID { get; set; }

    string lastUpdatedJob = "";
    private string checkName;

    [CascadingParameter]
    private Task<AuthenticationState> _authenticationState { get; set; }
    private AuthenticationState authState;

    protected async override Task OnInitializedAsync()
    {
        authState = await _authenticationState;
        checkName = authState.User.Identity.Name;

        var project = Userservice.GetByEmail(checkName);
        projectID = project.projectId;
        Tickets = TicketService.listOfTicketsForProject(project.projectId);
    }

    void HandleStatusUpdated(Ticket updateTicket)
    {
        lastUpdatedJob = updateTicket.taskDescription;
        // from here the ticket status can be updated after each change
    }

    private void onCreateDialogClose(bool accepted)
    {
        EditDialogOpen = false;
        StateHasChanged();
    }

    private void onCreateDialogOpen()
    {
        EditDialogOpen = true;
        StateHasChanged();
    }

    private void openCreateDialog()
    {
        onCreateDialogOpen();
    }

}
