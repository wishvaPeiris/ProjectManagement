// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211224130416_added_new_column")]
    partial class added_new_column
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Model.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("DataAccess.Model.Project", b =>
                {
                    b.Property<int>("projectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("companyProjectId")
                        .HasColumnType("int");

                    b.Property<string>("projectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("projectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("projectId");

                    b.HasIndex("companyProjectId");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("DataAccess.Model.Ticket", b =>
                {
                    b.Property<int>("ticketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("taskCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("taskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("taskTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ticketId");

                    b.HasIndex("projectId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("DataAccess.Model.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("DataAccess.Model.Developer", b =>
                {
                    b.HasBaseType("DataAccess.Model.User");

                    b.Property<int>("companyId")
                        .HasColumnType("int");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.HasIndex("companyId");

                    b.HasIndex("projectId");

                    b.HasDiscriminator().HasValue("Developer");
                });

            modelBuilder.Entity("DataAccess.Model.Project", b =>
                {
                    b.HasOne("DataAccess.Model.Company", "companyProject")
                        .WithMany("companyProjects")
                        .HasForeignKey("companyProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("companyProject");
                });

            modelBuilder.Entity("DataAccess.Model.Ticket", b =>
                {
                    b.HasOne("DataAccess.Model.Project", "project")
                        .WithMany("companyTask")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("project");
                });

            modelBuilder.Entity("DataAccess.Model.Developer", b =>
                {
                    b.HasOne("DataAccess.Model.Company", "companyDev")
                        .WithMany("companyDevs")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.Project", "projectDev")
                        .WithMany("developers")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("companyDev");

                    b.Navigation("projectDev");
                });

            modelBuilder.Entity("DataAccess.Model.Company", b =>
                {
                    b.Navigation("companyDevs");

                    b.Navigation("companyProjects");
                });

            modelBuilder.Entity("DataAccess.Model.Project", b =>
                {
                    b.Navigation("companyTask");

                    b.Navigation("developers");
                });
#pragma warning restore 612, 618
        }
    }
}
